
Introduction

[ ]
   1

Start coding or generate with AI.
Introduction to Python:


[ ]
   1
print('Hello WORLD!')
Hello WORLD!

[ ]
   1
print("Iam Medha start new programming ")
Iam Medha start new programming 

[ ]
   1

Start coding or generate with AI.
Python character set:


[ ]
   1
print("Medha is my name ","I love writing")
Medha is my name  I love writing

[ ]
   1
name="Medha"

[ ]
   1
age=25

[ ]
   1
price=25.99

[ ]
   1
print(price)
25.99
Variables
Rules for writing identifiers: Identifiers can only have letters (A–Z or a–z), digits (0–9), and underscores (_). Example: name, roll_no, student1 are valid.

An identifier cannot start with a digit. Example: 1name ❌ is invalid, but name1 ✅ is valid.

Identifiers cannot have special characters like @, #, !, %, etc. Example: total@score ❌ is invalid.

You cannot use Python keywords as identifiers. Example: if, while, class, def are reserved words and cannot be used.

Identifiers are case-sensitive. Example: Name and name are two different identifiers.

Although not a rule, it's a good practice to use meaningful names. Example: Use total_marks instead of x1.


[ ]
   1
   2
   3
print(type(name))


<class 'str'>

[ ]
   1
print(type(age))
<class 'int'>

[ ]
   1
print(type(price))
<class 'float'>
DATATYPE

[ ]
   1
   2
   3
   4
   5
   6
   7
name1="TRM"
age=23
old=False
a=None
print(type(old))
print(type(a))

<class 'bool'>
<class 'NoneType'>
TYPES OF OPERATOR

[ ]
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
  13
  14
  15
  16
  17
  18
  19
  20
  21
  22
  23
  24
  25
  26
  27
  28
a=2
b=5
diff=a-b
sum=a+b
mul=a*b
div=a/b
print(diff)
print(sum)
print(mul)
print(div)
print(a==b)
print(a!=b)
print(a>b)
print(a<b)
print(a>=b)
print(a<=b)
num=10
num=num+10
print(num)
num+=10
print(num)
num-=10
print(num)
num*=10
print(num)
num/=10
print(num)

-3
7
10
0.4
False
True
False
True
False
True
20
30
20
200
20.0
LOGICAL OPERATOR

[ ]
   1
   2
   3
   4
   5
a=50
b=30
print(not False)
print(not(a>b))

Input in python

[ ]
   1
   2
   3
   4
   5
name=input("Enter your name :")
print("welcome",name)
age=int(input("Enter your age :"))
print("your age is",age)

Enter your name :Medha
welcome Medha

[ ]
   1
   2
   3
   4
   5
   6
   7
   8
#a=2
#b=3
#sum=a+b
#print(sum)

f1=int (input("enter the first value:"))
f2=int (input("enter the second value:"))
print("sum=", f1+f2)
5
enter the first value:10
enter the second value:10
sum= 20

[ ]
   1

Start coding or generate with AI.
Strings and Condition

[ ]
   1
   2
str1="This is a string.\nwe are creating in python"
print(str1)
This is a string.
we are creating in python

[ ]
   1
   2
   3
str1="Tasmim"
str2="\nMedha"
print(str1+str2)
Tasmim
Medha

[ ]
   1
   2
   3
str="Tasmim"
ch=str[2]
print(ch)
s
Slicing----Accessing the parts of string.


[ ]
   1
   2
   3
str="Tasmim"
print(str[0:2])
print(len(str))

[ ]
   1

Start coding or generate with AI.
String Function
str.replace(old, new) str.endswith str.capitalize str.find(word) str.count("


[ ]
   1
   2
   3
name=input("Enter your name:")
print("length of my name is ",len(name))

Enter your name:TASMIM
length of my name is  6

[ ]
   1
   2
   3
   4
age=18
if(age>=18):
  print("can drive")

can drive

[ ]
   1
   2
   3
   4
   5
   6
marks=75
if(marks>=90):
  grade="A"
  if(marks>=80 and marks<90):
    grade="B"


[ ]
   1
   2
   3
   4
   5
   6
   7
num=9

if(num%2==0):
  print("Even")

else:
  print("Odd")
Odd

[ ]
   1

Start coding or generate with AI.
Lists and Tuples
strings are imutable but list are mutable.


[ ]
   1
   2
   3
   4
   5
student=["karan",96,12,"Delhi"]
#print(student[0])
student[0]="Arjun"
print(student)

['Arjun', 96, 12, 'Delhi']

[ ]
   1
   2
marks=[97,95,85,55,24]
print(marks[1:])
[95, 85, 55, 24]

[ ]
   1
   2
   3
   4
   5
my_list = [2, 1, 3]
my_list.append(4)#add one element at the end
my_list.sort(reverse=True)#sorts in decending order
my_list.insert(1,5)
print(my_list)
[4, 5, 3, 2, 1]

[ ]
   1
   2
   3
   4
   5
   6
#list.reverse() -----reverse list
#list.insert()
my_list = [2, 1, 3]
my_list.insert(1,5)
print(my_list)

[2, 5, 1, 3]

[ ]
   1
   2
   3
my_list = [2, 1, 3]
my_list.pop(0)
print(my_list)
[1, 3]
Tuples in Python

[ ]
   1
#Tuples also immutables

[ ]
   1
   2
   3
tup=("Medha")
print(tup)
print(type(tup))
Medha
<class 'str'>

[ ]
   1

Start coding or generate with AI.

[ ]
   1
   2
tup=(1,2,3,4,5)
print(tup.index(2))
1

[ ]
   1
   2
   3
   4
   5
   6
   7
   8
my_movie_list=[]
my_1st_movie=input("Enter your 1st movie:")
my_2nd_movie=input("Enter your 2nd movie:")
my_3rd_movie=input("Enter your 3rd movie:")
my_movie_list.append(my_1st_movie)
my_movie_list.append(my_2nd_movie)
my_movie_list.append(my_3rd_movie)
print(my_movie_list)
Enter your 1st movie:old school girl
Enter your 2nd movie:innosence
Enter your 3rd movie:All of us are dead
['old school girl', 'innosence', 'All of us are dead']

[ ]
   1
   2
   3
   4
   5
   6
   7
   8
list1=[1,2,3,2,1]
list2=[1,2,3]
copy_list1=list1.copy()
copy_list1.reverse()
if(copy_list1==list1):
   print("palindrom")
else:
    print("Not palindrom")
palindrom
loops
loops are use to repeat instructions


[ ]
   1
   2
while True:
  print('HELLO')

[ ]
   1

Start coding or generate with AI.
RECURSION
Double-click (or enter) to edit


[ ]
   1
   2
   3
   4
   5
   6
   7
def show(n):
  if(n==0):
    return
  print(n)
  show(n-1)

show(5)
5
4
3
2
1

[ ]
   1
   2
   3
   4
   5
   6
   7
   8
def fact(n):
  if(n==0 or n==1):
    return 1
  else:
    return fact(-1)*n
    print(fact(5))



[ ]
   1
   2
   3
   4
   5
   6
def fact(n):
  if(n==0 or n==1):
    return 1
  else:
    return fact(n-1)*n
print(fact(4))
24

[ ]
12345678
def calc_sum(n):
  if(n==0 ):
    return 1
  else:
    return calc_sum(n-1)+n

sum=calc_sum(5)
print(sum)
16
OOP IN PYTHON

[ ]
1234567
class Student:
      name="karan"

s1=Student()
print(s1.name)
s2=Student()
print(s2.name)
karan
karan

[ ]
1234567891011121314151617181920
class Car:
  def __init__(self,name,model,color):
    self.name=name
    self.model=model
    self.color=color

    class ToyotaCar(Car):
      def __init__(self,name,model,color,price):
        super().__init__(name,model,color)
        self.price=price


[ ]
   1
   2
   3
   4
   5
   6
   7
   8
   9
  10
  11
  12
# Create the file first in write mode ('w')
with open("demo.text", "w") as f:
    f.write("This is a demo file.\n")
    f.write("It contains some text.\n")

# Now open the file in read mode ('r')
with open("demo.text", "r") as f:
    data = f.read()

print(data)
print(type(data))
# The file is automatically closed when using 'with'
This is a demo file.
It contains some text.

<class 'str'>
Colab paid products - Cancel contracts here
